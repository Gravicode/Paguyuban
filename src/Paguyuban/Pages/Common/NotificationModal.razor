@inject NotificationService NotificationSvc
@inject UserProfileService UserSvc
@inject IToastService toastService

<div class="modal modal-lg-fullscreen fade" id="notificationModal" tabindex="-1" role="dialog" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-dialog-zoom">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notificationModalLabel">Notifications</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body p-0 hide-scrollbar">
                <div class="row">

                    <div class="col-12">
                        <!-- List Group Start -->
                        <ul class="list-group list-group-flush  py-2">

                            @if (ListNotification == null || ListNotification.Count <= 0)
                            {
                                <!-- List Group Item Start -->
                                <li class="list-group-item">
                                    <div class="media">
                                        <div class="media-body">
                                            <h6>
                                                Empty Notification
                                            </h6>

                                        </div>
                                    </div>
                                </li>
                                <!-- List Group Item End -->
                            }
                            else
                            {
                                foreach (var item in ListNotification)
                                {
                                    <!-- List Group Item Start -->
                                    <li class="list-group-item">
                                        <div class="media">
                                            <div class="btn btn-primary btn-icon rounded-circle text-light mr-2">
                                                @if (item.Action == NotificationActions.AddToContact)
                                                {
                                                    <svg class="hw-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
                                                    </svg>

                                                    <!-- Alternate :: External File link -->
                                                    <!-- <img class="injectable hw-24" src="./../assets/media/heroicons/outline/user-add.svg" alt=""> -->
                                                  
                                                }
                                                else if (item.Action == NotificationActions.NewGroupMessage)
                                                {
                                                    <!-- Default :: Inline SVG -->
                                                    <svg class="hw-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                    </svg>
                                                    <!-- Alternate :: External File link -->
                                                    <!-- <img class="injectable hw-24" src="./../assets/media/heroicons/outline/check-circle.svg" alt=""> -->
                                                }else if (item.Action == NotificationActions.NewMessage)
                                                {
                                                    <!-- Default :: Inline SVG -->
                                                    <svg class="hw-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                    </svg>
                                                    <!-- Alternate :: External File link -->
                                                    <!-- <img class="injectable hw-24" src="./../assets/media/heroicons/outline/check-circle.svg" alt=""> -->
                                                }
                                                else if (item.Action == NotificationActions.ChangeProfilePic)
                                                {
                                                    <svg class="hw-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                    </svg>
                                                    <!-- Alternate :: External File link -->
                                                    <!-- <img class="injectable hw-24" src="./../assets/media/heroicons/outline/photograph.svg" alt=""> -->
                                                }


                                              
                                            </div>

                                            <div class="media-body">
                                                <h6>
                                                    <a href="#">@item.User.FullName</a> @item.Message
                                                </h6>

                                                <p class="text-muted mb-0">@TimeHelpers.TimeAgo(item.CreatedDate)</p>
                                            </div>
                                        </div>
                                    </li>
                                    <!-- List Group Item End -->
                                }
                            }



                        </ul>
                        <!-- List Group End -->
                    </div>
                </div>
            </div>
            <div class="modal-footer justify-content-center">
                <button @onclick="Delete" type="button" class="btn btn-link text-muted">Clear all</button>
            </div>
        </div>
    </div>
</div>
@code {
    List<Notification> ListNotification = new();
    UserProfile selUser = new();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string Username;
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            Username = user.Identity.Name;
            selUser = UserSvc.GetItemByUsername(Username);
            if (selUser == null) selUser = new();

            Refresh();
        }


    }
    void Refresh()
    {
        ListNotification = NotificationSvc.GetLatestNotifications(Username);

    }
    async Task Delete()
    {
        var count = 0;
        foreach(var item in ListNotification)
        {
            var res = NotificationSvc.DeleteData(item);
            if (res)
            {
                count++;
            }
        }
        if (count > 0)
        {
            toastService.ShowSuccess("Notification is cleared.");
            Refresh();

        }
    }
}
