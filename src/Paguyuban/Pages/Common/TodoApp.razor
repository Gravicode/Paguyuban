@inject UserProfileService UserSvc
@inject TodoService TodoSvc
@inject IToastService toastService
@inject IJSRuntime IJS
@inject AppState AppState
@implements IDisposable
<div class="tab-pane h-100" id="todo" role="tabpanel" aria-labelledby="todo-tab">
    <div class="appnavbar-content-wrapper">
        <div class="appnavbar-scrollable-wrapper">
            <div class="appnavbar-heading sticky-top">
                <ul class="nav justify-content-between align-items-center">
                    <!-- Sidebar Title Start -->
                    <li class="text-center">
                        <h5 class="text-truncate mb-0">To-do List</h5>
                    </li>
                    <!-- Sidebar Title End -->
                    <!-- Close Sidebar Start -->
                    <li class="nav-item list-inline-item">
                        <div data-appcontent-close="">
                            <!-- Default :: Inline SVG -->
                            <svg class="hw-22" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>

                            <!-- Alternate :: External File link -->
                            <!-- <img class="injectable hw-22" src="./../assets/media/heroicons/outline/x.svg" alt=""> -->

                        </div>
                    </li>
                    <!-- Close Sidebar End -->
                </ul>
            </div>

            <div class="appnavbar-body">
                <div class="appnavbar-body-title">
                    <!-- Sidebar Header Dropdown Start -->
                    <div class="dropdown mr-2">
                        <!-- Dropdown Button Start -->
                        <button class="btn btn-outline-default dropdown-toggle" type="button" data-tasks-filter-list="" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@SelectedTag</button>
                        <!-- Dropdown Button End -->
                        <!-- Dropdown Menu Start -->
                        <div class="dropdown-menu">
                            <a class="dropdown-item" @onclick='()=>SelectStatus("All")' data-task-filter="" data-select="all-tasks" href="#">All Tasks</a>
                            <a class="dropdown-item" @onclick='()=>SelectStatus("Active")' data-task-filter="" data-select="active" href="#">Active</a>
                            <a class="dropdown-item" @onclick='()=>SelectStatus("Finished")' data-task-filter="" data-select="finished" href="#">Finished</a>
                        </div>
                        <!-- Dropdown Menu End -->
                    </div>
                    <!-- Sidebar Header Dropdown End -->
                    <!-- Sidebar Search Start -->
                    <form class="form-inline">
                        <div class="input-group">
                            <input type="text" @bind="Keyword" @onkeyup="KeyUp" class="form-control search border-right-0 transparent-bg pr-0" placeholder="Search Todos">
                            <div class="input-group-append">
                                <div @onclick="LoadData" class="input-group-text transparent-bg border-left-0" role="button">
                                    <!-- Default :: Inline SVG -->
                                    <svg class="text-muted hw-20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                    </svg>

                                    <!-- Alternate :: External File link -->
                                    <!-- <img class="injectable hw-20" src="./../assets/media/heroicons/outline/search.svg" alt=""> -->
                                </div>
                            </div>
                        </div>
                    </form>
                    <!-- Sidebar Search End -->
                </div>

                <div class="todo-container">
                    @if(ListDays!=null)
                    @foreach (var selDay in ListDays)
                    {         
                        <div class="todo-title">
                            <h6 class="mb-0">@selDay.Tanggal.ToString("dd/MMM/yyyy")</h6>
                            <p class="text-muted">@selDay.Datas.Count.ToString("n0") Task remaining</p>
                        </div>

                        <div class="card">
                            <div class="card-body">
                                <ul class="todo-list">
                                    @foreach(var item in selDay.Datas)
                                    {
                                            <li class="todo-item @(item.IsDone?"todo-task-done":"")">
                                        <div class="custom-control custom-checkbox">
                                                    <input type="checkbox" class="custom-control-input" @onchange="eventArgs => { CheckboxClicked(item, eventArgs.Value); }" checked="@item.IsDone" id="@($"chk{item.Id}")">
                                                    <label class="custom-control-label" for="@($"chk{item.Id}")">&nbsp;</label>
                                        </div>
                                        <h6 class="todo-title" @onclick="()=>PrepareForEdit(item)" data-toggle="modal" data-target="#taskModal">@item.Title</h6>
                                    </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="appnavbar-footer">
                <div class="btn btn-primary btn-block" @onclick="(() => InitializeitemObject())" role="button" data-toggle="modal" data-target="#addTaskModal">Add new task</div>
            </div>
        </div>
    </div>
</div>
@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }
    Todo itemObject = new();
    UserProfile SelUser = new UserProfile();
    List<Todo> ListTodos = new();
    List<TodoDay> ListDays = new();
    string Keyword;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;
    string SelectedTag = "All";
    void CheckboxClicked(Todo Item, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            Item.IsDone = true;
        }
        else
        {
            Item.IsDone = false;
        }
        var res = TodoSvc.UpdateData(Item);
    }
    private async Task Delete()
    {
        var res = TodoSvc.DeleteData(itemObject);
        if (res)
        {
            await LoadData();
            toastService.ShowSuccess("Item deleted.");
        }
        await IJS.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        itemObject = new();
    }
    private async Task Delete(Todo item)
    {

        var res = TodoSvc.DeleteData(item);
        if (res)
        {
            await LoadData();
            toastService.ShowSuccess("Item deleted.");
        }
    }
    private void InitializeitemObject()
    {

        itemObject = new();
        itemObject.Id = Guid.NewGuid().ToString();
        itemObject.Username = SelUser.Username;
        Layout.SetTodo(itemObject);

    }
    async void Refresh(string username)
    {
        if (SelUser.Username == username)
        {
            await LoadData();
            await InvokeAsync(StateHasChanged);
        }
    }
    public void Dispose()
    {
        AppState.OnTodosAdded -= Refresh;
    }
    private void PrepareForDelete(Todo item)
    {
        itemObject = item;
    } 

    private void PrepareForEdit(Todo item)
    {
        Layout.SetEditTodo(item);
    }
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            SelUser = UserSvc.GetItemByUsername(UserName);
            await LoadData();
        }
        AppState.OnTodosAdded += Refresh;
    }


    async Task ChangeStatus(Todo item, bool State)
    {
        item.IsDone = State;
        var res = TodoSvc.UpdateData(item);
        if (res)
        {
            await LoadData();
            toastService.ShowSuccess("Tag updated.");
        }
    }

    async Task SelectStatus(string State)
    {
        SelectedTag = State;
        await LoadData();
    }

    async Task LoadData()
    {

        IEnumerable<Todo> data = TodoSvc.GetByUsername(SelUser.Username);
        if (!string.IsNullOrEmpty(Keyword))
            data = data.Where(x => x.Title.Contains(Keyword));

        if (string.IsNullOrEmpty(SelectedTag) || SelectedTag == "All")
            ListTodos = data.OrderBy(x => x.CreatedDate).ToList();
        else if (SelectedTag == "Active")
            ListTodos = data.Where(x => !x.IsDone).ToList();
        else
            ListTodos = data.Where(x => x.IsDone).ToList();

        ListDays = ListTodos.GroupBy(x => x.CreatedDate.ToString("dd-MM-yyyy")).Select(y => new TodoDay(){
           Key=  y.Key, Tanggal = y.First().CreatedDate, Datas = y.ToList() }
        ).ToList();

    }
    async Task KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadData();
            //Console.WriteLine(this.Value);
        }
    }
}
