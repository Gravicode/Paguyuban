@inject UserProfileService UserSvc
@inject ContactService ContactSvc
@inject IJSRuntime IJS
@inject NavigationManager NavMgr
@inject IToastService toastService
@inject AppState AppState
@inject CallLogService CallSvc

<div class="calls px-0 py-2 p-xl-3">
    <div class="container-xl">
        <div class="row">
            <div class="col">
                <div class="card card-bg-1 mb-3">
                    <div class="card-body">
                        <div class="d-flex flex-column align-items-center">
                            <div class="avatar avatar-lg mb-3">
                                <img class="avatar-img" src="@(string.IsNullOrEmpty(SelectedCall.ToUser.PicUrl)?"./../assets/media/avatar/2.png":SelectedCall.ToUser.PicUrl)" alt="">
                            </div>

                            <div class="d-flex flex-column align-items-center">
                                <h5 class="mb-1">@SelectedCall.ToUser.FullName</h5>
                                <p class="text-white rounded px-2 bg-primary">@SelectedCall.ToUser.Phone</p>
                            </div>
                        </div>
                    </div>

                    <div class="card-options">
                        <div class="dropdown">
                            <button class="btn btn-secondary btn-icon btn-minimal btn-sm text-muted" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <svg class="hw-20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                                </svg>

                                <!-- <img class="injectable hw-20" src="./../assets/media/heroicons/outline/dots-vertical.svg" alt=""> -->
                            </button>
                            <div class="dropdown-menu dropdown-menu-right">
                                <a class="dropdown-item" @onclick="Delete" href="#">Clear Call Log</a>
                                <a class="dropdown-item" href="#">Block</a>
                            </div>
                        </div>
                    </div>

                    <div class="chat-closer d-xl-none">
                        <!-- Chat Back Button (Visible only in Small Devices) -->
                        <button class="btn btn-secondary btn-icon btn-minimal btn-sm text-muted" type="button" data-close="">
                            <svg class="hw-20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                            </svg>

                            <!-- <img class="injectable hw-20" src="./../assets/media/heroicons/outline/arrow-left.svg" alt=""> -->
                        </button>
                    </div>

                </div>
            </div>
        </div>

        <div class="row calls-log">
            <div class="col">
                @foreach (var item in SelectedCall.Datas)
                {
                    <div class="card">
                        <div class="card-body">
                            <div class="media">
                                <div class="avatar avatar-primary mr-2">
                                    <span>
                                        @if (item.CallType == CallTypes.Incoming || item.CallType == CallTypes.Missed)
                                        {
                                            <svg class="hw-24" viewBox="0 0 20 20" fill="currentColor">
                                                <path d="M14.414 7l3.293-3.293a1 1 0 00-1.414-1.414L13 5.586V4a1 1 0 10-2 0v4.003a.996.996 0 00.617.921A.997.997 0 0012 9h4a1 1 0 100-2h-1.586z" />
                                                <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
                                            </svg>

                                            <!-- <img class="injectable hw-24" src="./../assets/media/heroicons/solid/phone-incoming.svg" alt=""> -->
                                        }
                                        else if (item.CallType == CallTypes.Outgoing)
                                        {
                                            <svg class="hw-24" viewBox="0 0 20 20" fill="currentColor">
                                                <path d="M17.924 2.617a.997.997 0 00-.215-.322l-.004-.004A.997.997 0 0017 2h-4a1 1 0 100 2h1.586l-3.293 3.293a1 1 0 001.414 1.414L16 5.414V7a1 1 0 102 0V3a.997.997 0 00-.076-.383z" />
                                                <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
                                            </svg>

                                            <!-- <img class="injectable hw-24" src="./../assets/media/heroicons/solid/phone-outgoing.svg" alt=""> -->
                                        }
                                     

                                    </span>
                                </div>

                                <div class="media-body">

                                    @if (item.CallType == CallTypes.Incoming)
                                    {
                                        <h6>Incoming Call</h6>
                                    }
                                    else if (item.CallType == CallTypes.Outgoing)
                                    {
                                        <h6>Outgoing Call</h6>
                                    }
                                    else
                                    {
                                        <h6 class="text-danger">Missed Call</h6>
                                    }


                                    <div class="d-flex flex-column flex-sm-row align-items-sm-center align-items-start">
                                        <p class="text-muted mb-0">Just now</p><span class="d-none d-sm-block text-muted mx-2">•</span>
                                        <p class="text-muted mb-0">@($"{item.Duration.Minutes}m {item.Duration.Seconds}s")</p>
                                    </div>
                                </div>

                                <div class="media-options ml-1 d-none d-sm-block">
                                    <button @onclick="Call" class="btn btn-secondary btn-icon btn-minimal btn-sm text-muted" type="button">
                                        <svg class="hw-20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                                        </svg>

                                        <!-- <img class="injectable hw-20" src="./../assets/media/heroicons/outline/phone.svg" alt=""> -->
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
           
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public CallItem SelectedCall { get; set; }
    UserProfile SelUser = new UserProfile();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;



    async Task Call()
    {


        if (!string.IsNullOrEmpty(SelectedCall.ToUser.Phone))
        {
            var outgoing = new CallLog() { CallDate = DateHelper.GetLocalTimeNow(), CallType = CallTypes.Outgoing, Duration = new TimeSpan(0, 1, 1), FromUser = SelUser, ToUser = SelectedCall.ToUser, Username = SelUser.Username };
            var incoming = new CallLog() { CallDate = DateHelper.GetLocalTimeNow(), CallType = CallTypes.Incoming, Duration = new TimeSpan(0, 1, 1), FromUser = SelUser, ToUser = SelectedCall.ToUser, Username = SelectedCall.ToUser.Username };
            var res = CallSvc.InsertData(outgoing);
            res = CallSvc.InsertData(incoming);

            await IJS.InvokeVoidAsync("CallNumber", SelectedCall.ToUser.Phone);
        }
        else
            toastService.ShowWarning("No phone number for this contact");
    }

    async Task Delete()
    {
        var count = 0;
        foreach(var item in SelectedCall.Datas)
        {
            var res = CallSvc.DeleteData(item);
            if (res) count++;
        }
        if (count > 0)
        {
            toastService.ShowInfo($"{count} call logs cleared");
            await IJS.InvokeVoidAsync("GotoCalls");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            SelUser = UserSvc.GetItemByUsername(UserName);

        }



    }
}
