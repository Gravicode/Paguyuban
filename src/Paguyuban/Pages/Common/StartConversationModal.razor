@inject UserProfileService UserSvc
@inject MessageBoxService MessageBoxSvc
@inject ContactService ContactSvc
@inject IJSRuntime IJS
@inject IToastService toastService
@inject AppState AppState
@implements IDisposable
<div class="modal modal-lg-fullscreen fade" id="startConversation" tabindex="-1" role="dialog" aria-labelledby="startConversationLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-dialog-zoom">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="startConversationLabel">New Chat</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body p-0 hide-scrollbar">
                <div class="row">
                    <div class="col-12">
                        <!-- Search Start -->
                        <form class="form-inline w-100 p-2 border-bottom">
                            <div class="input-group w-100 bg-light">
                                <input type="text" @onkeyup="KeyUp" @bind="Keyword" class="form-control form-control-md search border-right-0 transparent-bg pr-0" placeholder="Search">
                                <div class="input-group-append">
                                    <div @onclick="Search" class="input-group-text transparent-bg border-left-0" role="button">
                                        <!-- Default :: Inline SVG -->
                                        <svg class="hw-20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                        </svg>

                                        <!-- Alternate :: External File link -->
                                        <!-- <img class="injectable hw-20" src="./../assets/media/heroicons/outline/search.svg" alt=""> -->
                                    </div>
                                </div>
                            </div>
                        </form>
                        <!-- Search End -->
                    </div>

                    <div class="col-12">
                        <!-- List Group Start -->
                        <ul class="list-group list-group-flush">
                            <Virtualize Items="@ListContact" Context="item">
                                <!-- List Group Item Start -->
                                <li @key="item.Id" class="list-group-item">
                                    <div class="media">
                                        <div class="avatar avatar-online mr-2">
                                            <img src="@(string.IsNullOrEmpty(item.User?.PicUrl)? "./../assets/media/avatar/1.png": item.User.PicUrl)" alt="">
                                        </div>

                                        <div class="media-body">
                                            <h6 class="text-truncate">
                                                <a href="#" @onclick:preventDefault @onclick="()=>SelectContact(item)" class="text-reset">@item.FullName</a>
                                            </h6>

                                            <p class="text-muted mb-0">@item.User.Aktif</p>
                                        </div>
                                    </div>
                                </li>

                                <!-- List Group Item End -->
                            </Virtualize>


                        </ul>
                        <!-- List Group End -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    string Keyword;
    [Parameter]
    public List<Contact> ListContact { get; set; } = new();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;
    UserProfile SelUser;
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            SelUser = UserSvc.GetItemByUsername(UserName);
            Search();
        }
        AppState.OnContactAdded += Refresh;
    }
    async Task KeyUp(KeyboardEventArgs e)
    {

        if (e.Key == "Enter")
        {
            Search();
        }
    }
    async void Refresh(string username)
    {
        if (SelUser.Username == username)
        {
            Search();
            await InvokeAsync(StateHasChanged);
        }
    }
    public void Dispose()
    {
        AppState.OnContactAdded -= Refresh;
    }
    void Search()
    {
        //if (string.IsNullOrEmpty(Keyword))
        //{
        //    toastService.ShowWarning("Silakan isi keyword dulu.");
        //    return;
        //}

        ListContact = ContactSvc.FindByKeyword(Keyword, SelUser.Username);
    }
    async Task SelectContact(Contact item)
    {
        if (item != null)
        {
            AppState.RefreshMessageBox(item.User.Username);
            await IJS.InvokeVoidAsync("CloseModal", "startConversation");
        }

    }
}
